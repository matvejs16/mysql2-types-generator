import { FieldPacket, RowDataPacket } from "mysql2"
import * as fs from "fs"
import * as path from "path"
import DB from 'mysql2-handler'
// import DB, { DBConnectOptions } from 'E:\\Coding Scripts\\NodeJs Test\\DBHandler'
import chalk from "chalk"

const filePathData = path.join(__dirname, "./Data")
const filePathDefault = path.join(filePathData, "./types")

export default async function generateDatabaseTSFile(DBInstance: typeof DB, DBName: string, filesPath: string = filePathDefault) {
	if (!DBInstance.Handle_Promise) return console.log(`[${chalk.red("DB")} ${chalk.cyan("Types")}] Database not connected`)
	console.log(`[${chalk.cyan("DB")} ${chalk.cyan("Types")}] Generating DBTypes file...`)
	const [tables]: [RowDataPacket[], FieldPacket[]] = await DBInstance.Handle_Promise.query(`SHOW TABLES FROM ${DBName}`)
	const tableNames = tables.map((table: any) => {
		const tableName = table[Object.keys(table)[0]]
		return tableName as string
	})

	const tableTypes: string[] = []
	for (const tableName of tableNames) {
		const [tableFields]: [RowDataPacket[], FieldPacket[]] = await DBInstance.Handle_Promise.query(`SHOW COLUMNS FROM ${DBName}.${tableName}`)

		const fields = tableFields.map((field: any) => {
			const fieldName = field["Field"]
			const fieldType = field["Type"]
			const fieldNull = field["Null"] === "YES" ? " | null" : ""

            const fieldTypeOnly = fieldType.replace(/\(.+\)/, "").replace("unsigned", "").trim()
            const thisFieldType = getColumnDataType(fieldTypeOnly) + fieldNull

			return `${fieldName}: ${thisFieldType}`
		})
		tableTypes.push(`export interface ${tableName}Object { ${fields.join(", ")} }`)
	}

    const fileContentsDisclaimer = `// This file is auto-generated by mysql2-types-generator\n// Do not edit this file directly, otherwise your changes will be overwritten\n`
    const fileContents = `${fileContentsDisclaimer}${tableTypes.join("\n")}`
    const thisFilePath = path.join(filesPath, `DBTypes.${DBName}.ts`)
    console.log(`[${chalk.cyan("DB")} ${chalk.cyan("Types")}] Writing DBTypes file to ${thisFilePath}`)
    if (!fs.existsSync(filesPath)) fs.mkdirSync(filesPath)
    fs.writeFileSync(thisFilePath, fileContents)
    console.log(`[${chalk.cyan("DB")} ${chalk.cyan("Types")}] Finished generating DBTypes file`)
}

function getColumnDataType(dataType: string | null): string {
    switch (dataType) {
		case "int":
		case "smallint":
		case "mediumint":
		case "bigint":
		case "decimal":
		case "float":
		case "double":
		case "numeric":
			return "number";

		case "char":
		case "varchar":
		case "text":
		case "mediumtext":
		case "longtext":
			return "string";

		case "date":
		case "datetime":
		case "timestamp":
			return "Date";

		case "year":
			return "number";

		case "time":
			return "string";

		case "binary":
		case "varbinary":
		case "blob":
		case "tinyblob":
		case "mediumblob":
		case "longblob":
		case "bit":
			return "Buffer";

		case "tinyint":
			return "number";

		case "json":
			return "any";

		case "set":
			return "string";

		default:
			console.error("WARNING: unknown data type: " + dataType);
			return "any";
	}
}